pipeline {
	agent {
		label 'main'
    }
	
	environment {
        PROJECT_NAME = 'node-test-app1'
        ECR_REPO = '181310995938.dkr.ecr.ap-south-1.amazonaws.com/pp-app-dev/pp-hello-service'
        VERSION = 'currentBuild.number'
    }
	 stages {
        stage('Checkout Code') {
            steps {
                withCredentials([string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN')]) {
                    git branch: 'main',
                        credentialsId: 'github-pat',
                        url: 'https://github.com/Sayali-189/node-test-app1.git'
                }
            }
        }
        stage('Build Docker Image'){
            steps{
                sh "docker build -t  ${ECR_REPO}:${PROJECT_NAME}-${VERSION} ."
            }
        }
        stage('Push Docker Image'){ 
            steps{
                script{
                    docker.withRegistry('http://'181310995938.dkr.ecr.ap-south-1.amazonaws.com', 'ecr:ap-south-1:aws-cred-id') {
					sh "docker push ${ECR_REPO}:${PROJECT_NAME}-${VERSION}"
                    }
                }
            }
        }
        stage('Deleting local docker image'){    
                    steps{
                        //  make sure that the Docker image is removed
                        sh "docker rmi -f ${ECR_REPO}:${PROJECT_NAME}-${VERSION} | true"
            }
        }
        stage('Deploy to Dev') {
			
                            withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'EDF-DEV-5', contextName: '', credentialsId: 'SECRET_TOKEN', namespace: 'pp-app-dev', serverUrl: 'https://C4C1740D02111A86C35A3DD698BB9A5C.gr7.ap-south-1.eks.amazonaws.com']]) {
								sh "cat node-test-app1/dev-deployment.yml | sed s/{{BUILD_NUMBER}}/${VERSION}/g | kubectl apply -f -"
								sh "cat node-test-app1/dev-autoscaling.yml | kubectl apply -f -"
                            }
                        
                        catch (Exception e) {
						echo "Request timeout! Build Aborted"
                        }
                    }
                }
            }
        }
    
